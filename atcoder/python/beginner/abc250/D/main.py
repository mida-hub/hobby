#!/usr/bin/env python3
import sys
import math

def is_prime(x):
    if x < 2: return False # 2未満に素数はない
    if x == 2 or x == 3 or x == 5: return True # 2,3,5は素数
    if x % 2 == 0 or x % 3 == 0 or x % 5 == 0: return False # 2,3,5の倍数は合成数

    # ためし割り: 疑似素数(2でも3でも5でも割り切れない数字)で次々に割っていく
    prime = 7
    step = 4
    while prime <= math.sqrt(x):
        if x % prime == 0: return False

        prime += step
        step = 6 - step

    return True

def combinations_count(n, r):
    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))

def solve(N: int):
    n_2 = N // 2
    i = 1
    primes = [2]
    while i * i * i <= n_2:
        if is_prime(i):
            primes.append(i)
        i += 2
    # print(primes)
    ans = 0

    q = len(primes) - 1
    ans = 0
    index = 0
    for p in primes:
        while p < primes[q] and p * primes[q] * primes[q] * primes[q] > N:
            q -= 1
        # print(p, primes[q], q)
        if p < primes[q]:
            index += 1
            ans += q - index
        else:
            break
    ans += q

    print(ans)
    return

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    solve(N)

if __name__ == '__main__':
    main()
