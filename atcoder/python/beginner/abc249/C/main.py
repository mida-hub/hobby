#!/usr/bin/env python3
import sys
from collections import Counter

def solve(N: int, K: int, S: "List[str]"):
    results = 0
    for bit in range(1 << N):
        b = []
        for i in range(N):
            if (bit & (1 << i)):
                b.append(S[i])
        if len(b) > 0:
            c = Counter(list("".join(b)))
            k_len_in_c = len([c[x] for x in c if c[x] == K])
            if k_len_in_c > results:
                results = k_len_in_c
    print(results)
    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(N)]  # type: "List[str]"
    solve(N, K, S)

if __name__ == '__main__':
    main()
