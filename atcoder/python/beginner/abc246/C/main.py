#!/usr/bin/env python3
import sys
import heapq

def solve(N: int, K: int, X: int, A: "List[int]"):
    used_coupon_count = 0
    for i in range(N):
        used_coupon_count += int(A[i]/X)

    if used_coupon_count - K >= 0:
        print(max([(sum(A) - K * X), 0]))
        return

    for i in range(N):
        A[i] = A[i] % X

    A = list(reversed(sorted(A)))
    for i in range(min([(K - used_coupon_count), N])):
        A[i] = 0
    print(sum(A))

    return

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, X, A)

if __name__ == '__main__':
    main()
