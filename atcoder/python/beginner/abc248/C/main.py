#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int


def solve(N: int, M: int, K: int):
    dp = [[0] * (K+1) for i in range(N+1)]
    # dp[i][sum] 数列i番目で、組み合わせ合計sum
    # i=1 sum=3 の例
    # 1
    # 2
    # 3
    # i=2 sum=6 の例
    # 1 1
    # 1 2
    # 1 3
    # 2 1
    # 2 2
    # 3 1
    dp[0][0] = 1

    # print(f"N={N}, M={M}, K={K}")

    for i in range(N):
        for j in range(K+1):
            for k in range(1, M+1):
                # print(f"i={i}, j={j}, k={k}, {j+k}<={K}")
                if j + k <= K:
                    print(f"dp[{i+1}][{j+k}] += dp[{i}][{j}]")
                    dp[i+1][j+k] += dp[i][j]
                    for d in dp:
                        print(d)
    
    ans = 0
    for k in range(K+1):
        ans += dp[N][k]
        ans %= MOD

    print(ans)

    return


# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(N, M, K)

if __name__ == '__main__':
    main()
