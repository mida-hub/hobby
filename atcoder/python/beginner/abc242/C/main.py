#!/usr/bin/env python3
import sys
import copy

MOD = 998244353  # type: int


def solve(N: int):
    dp_before = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

    for d in range(2, N+1):
        dp_after = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        for i in range(1, 10):
            # f(4??)+=f(5?)
            # f(5??)+=f(5?)
            # f(6??)+=f(5?)
            for j in range(max(1, i - 1), min(10, i + 2)):
                dp_after[j] += dp_before[i]
                dp_after[j] %= MOD
        
        # print(f'dp={dp_after}')
        dp_before = copy.copy(dp_after)

    result = 0
    for i in range(1, 10):
        # print(dp[N][i])
        result += dp_after[i]
        result %= MOD
    print(result)
    return

# Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    solve(N)

if __name__ == '__main__':
    main()
