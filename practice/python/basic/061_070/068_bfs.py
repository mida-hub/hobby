from collections import deque

def breadth_first_search(H, W, s, g, S):
    """
    H: 迷路の高さ
    W: 迷路の幅
    s: スタート地点(y, x)
    g: ゴール地点(y, x)
    S: 迷路図（文字列のリスト）
    """
    
    def search(queue):
        while queue:
            y, x = queue.popleft()
            
            if y == g[0] and x == g[1]:
                return reached[y][x]

            for i ,j in ([1, 0], [-1, 0], [0, 1], [0, -1]):
                y_new, x_new = (y + i), (x + j)
                # 進行可能
                if reached[y_new][x_new] == -1 and S[y_new][x_new] == '.':
                    queue.append([y_new, x_new])
                    reached[y_new][x_new] = reached[y][x] + 1

    reached = [[-1 for i in range(W)] for j in range(H)]
    s[0]-=1
    s[1]-=1
    g[0]-=1
    g[1]-=1

    reached[s[1]][s[0]] = 0

    queue = deque([s])
    print(search(queue))

Hs = [7, 5, 50]
Ws = [8, 8, 50]
ss = [[2, 2], [2, 2], [2, 2]]
gs = [[4, 5], [2, 4], [49, 49]]
Ss = [
    ['########','#......#','#.######','#..#...#','#..##..#','##.....#','########'],
    ['########','#.#....#','#.###..#','#......#','########'],
    ['##################################################','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','#................................................#','##################################################']
]
breadth_first_search(Hs[0], Ws[0], ss[0], gs[0], Ss[0]) # 11
breadth_first_search(Hs[1], Ws[1], ss[1], gs[1], Ss[1]) # 10
breadth_first_search(Hs[2], Ws[2], ss[2], gs[2], Ss[2]) # 94
